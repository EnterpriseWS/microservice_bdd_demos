// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BenefitCsBdd.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FlexAdvantageBenefitFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FlexAdvantageBenefit", "\tA new multi-tier benefit structure that covers\r\n\tMedical, dental & Rx major cate" +
                    "gories. It has \r\n\tseparate levels of co-insurance amount and PCP\r\n\tfocused provi" +
                    "der network", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "FlexAdvantageBenefit")))
            {
                global::BenefitCsBdd.Tests.Features.FlexAdvantageBenefitFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Multi_tier medical benefit contains at least two levels of deductible")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FlexAdvantageBenefit")]
        public virtual void Multi_TierMedicalBenefitContainsAtLeastTwoLevelsOfDeductible()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multi_tier medical benefit contains at least two levels of deductible", null, ((string[])(null)));
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("The medical benefit has level one deductible and level two deductible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.When("I inquire the deductible amount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("the result should output level one and level two deductible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Multi-tier medical benefit contains only one max OOP amount")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FlexAdvantageBenefit")]
        public virtual void Multi_TierMedicalBenefitContainsOnlyOneMaxOOPAmount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multi-tier medical benefit contains only one max OOP amount", null, ((string[])(null)));
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("The medical benefit has only one max OOP amount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.When("I inquire the max OOP amount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("the result should output one max OOP amount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("All tiers claim amount accumulation toward to OOP amount")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FlexAdvantageBenefit")]
        public virtual void AllTiersClaimAmountAccumulationTowardToOOPAmount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All tiers claim amount accumulation toward to OOP amount", null, ((string[])(null)));
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "MemberId",
                        "ProductId",
                        "Tier",
                        "ClaimDesc",
                        "Amount"});
            table1.AddRow(new string[] {
                        "X0001",
                        "ABC00001",
                        "1",
                        "Office Visit",
                        "100.00"});
            table1.AddRow(new string[] {
                        "X0001",
                        "ABC00001",
                        "1",
                        "Blood Test",
                        "50.00"});
            table1.AddRow(new string[] {
                        "X0001",
                        "ABC00001",
                        "2",
                        "X-Ray",
                        "75.00"});
            table1.AddRow(new string[] {
                        "X0001",
                        "ABC00001",
                        "2",
                        "Specialist Visit",
                        "150.00"});
            table1.AddRow(new string[] {
                        "X0002",
                        "ABC00001",
                        "1",
                        "Office Visit",
                        "150.00"});
            table1.AddRow(new string[] {
                        "X0002",
                        "ABC00001",
                        "1",
                        "Blood Test",
                        "125.00"});
            table1.AddRow(new string[] {
                        "X0002",
                        "ABC00001",
                        "2",
                        "X-Ray",
                        "75.00"});
            table1.AddRow(new string[] {
                        "X0002",
                        "ABC00001",
                        "2",
                        "Specialist Visit",
                        "150.00"});
            table1.AddRow(new string[] {
                        "X0002",
                        "ABC00001",
                        "2",
                        "Tissue Removal",
                        "220.00"});
            testRunner.Given("The table below records insured member medical claim for all tiers", ((string)(null)), table1, "Given ");
            testRunner.When("I inquire a member current OOP amount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("the result should output a summation of all claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
